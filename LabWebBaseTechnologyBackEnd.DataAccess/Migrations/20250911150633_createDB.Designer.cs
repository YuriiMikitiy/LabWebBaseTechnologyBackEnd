// <auto-generated />
using System;
using LabWebBaseTechnologyBackEnd.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LabWebBaseTechnologyBackEnd.DataAccess.Migrations
{
    [DbContext(typeof(LabWebBaseTechnologyDBContext))]
    [Migration("20250911150633_createDB")]
    partial class createDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LabWebBaseTechnologyBackEnd.DataAccess.ModulEntity.BookingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("LabWebBaseTechnologyBackEnd.DataAccess.ModulEntity.FlightDelayDataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("DelayProbability")
                        .HasColumnType("double precision");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uuid");

                    b.Property<string>("Weather")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.ToTable("FlightDelayData");
                });

            modelBuilder.Entity("LabWebBaseTechnologyBackEnd.DataAccess.ModulEntity.FlightEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("LabWebBaseTechnologyBackEnd.DataAccess.ModulEntity.PaymentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("LabWebBaseTechnologyBackEnd.DataAccess.ModulEntity.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LabWebBaseTechnologyBackEnd.DataAccess.ModulEntity.BookingEntity", b =>
                {
                    b.HasOne("LabWebBaseTechnologyBackEnd.DataAccess.ModulEntity.FlightEntity", "Flight")
                        .WithMany("Bookings")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabWebBaseTechnologyBackEnd.DataAccess.ModulEntity.UserEntity", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LabWebBaseTechnologyBackEnd.DataAccess.ModulEntity.FlightDelayDataEntity", b =>
                {
                    b.HasOne("LabWebBaseTechnologyBackEnd.DataAccess.ModulEntity.FlightEntity", "Flight")
                        .WithMany("DelayData")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("LabWebBaseTechnologyBackEnd.DataAccess.ModulEntity.PaymentEntity", b =>
                {
                    b.HasOne("LabWebBaseTechnologyBackEnd.DataAccess.ModulEntity.BookingEntity", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("LabWebBaseTechnologyBackEnd.DataAccess.ModulEntity.PaymentEntity", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("LabWebBaseTechnologyBackEnd.DataAccess.ModulEntity.BookingEntity", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("LabWebBaseTechnologyBackEnd.DataAccess.ModulEntity.FlightEntity", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("DelayData");
                });

            modelBuilder.Entity("LabWebBaseTechnologyBackEnd.DataAccess.ModulEntity.UserEntity", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
